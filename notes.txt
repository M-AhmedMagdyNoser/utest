> npm init (--y)

> npm i express
const express = require("express");
const app = express();
app.get("/", (req, res) => { res.send("Hello World!"); });
app.listen(5145, () => { console.log("Listening on port 5145"); });

> npm i -g nodemon
in the package.json add "dev": "nodemon server.js"
> npm run dev

create config.env (ignore it in the .gitignore)
add PORT=5145
> npm i dotenv
const dotenv = require("dotenv");
dotenv.config({ path: "config.env" });
const PORT = process.env.PORT || 5145;

> npm i morgan
const morgan = require("morgan");
app.use(morgan("dev"));

> npm i mongoose
const mongoose = require("mongoose");
mongoose.connect(process.env.DB_URI).then(() => { console.log("DB Connected"); }).catch((err) => { console.log(`DB Connection Error: ${err}`); });

=================================================

app.use(express.json()); // Middleware to parse JSON request bodies

const categorySchema = new mongoose.Schema({
  name: String,
  description: String,
});

const CategoryModal = mongoose.model("Category", categorySchema);

app.post("/", (req, res) => {
  const { name, description } = req.body;
  const category = new CategoryModal({ name, description });
  category
    .save()
    .then(() => {
      res.status(201).json(category);
    })
    .catch((err) => {
      res.status(500).json({ message: "Error creating category" });
    });
});

=================================================

Starting to create the folder structure and the CRUD routes

=================================================

// Pagination

// Without pagination
exports.getCategories = async (req, res) => {
  try {
    const categories = await CategoryModal.find();
    res.status(200).json({ results: categories.length, data: categories });
  } catch (err) {
    res.status(500).json({ message: `Error fetching categories: ${err}` });
  }
};

// With pagination
exports.getCategories = async (req, res) => {
  try {
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    const skip = (page - 1) * limit;
    const categories = await CategoryModal.find().skip(skip).limit(limit);
    res.status(200).json({
      page,
      limit,
      results: categories.length,
      data: categories,
    });
  } catch (err) {
    res.status(500).json({ message: `Error fetching categories: ${err}` });
  }
};

=================================================

Error Handling
- See deleteCategory examples
- See global error handler in server.js
- See utils/apiError